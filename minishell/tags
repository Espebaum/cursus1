!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_SIZE	get_next_line/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC				= cc$/;"	m
CC	libft/Makefile	/^CC = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS			= -Wall -Wextra -Werror -g3 -fsanitize=address$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Werror -Wextra$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS		= -I${HOME}\/.brew\/opt\/readline\/include$/;"	m
DFL	minishell.h	/^# define DFL /;"	d
DOC	minishell.h	/^# define DOC /;"	d
GET_NEXT_LINE_H	get_next_line/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
IGN	minishell.h	/^# define IGN /;"	d
LDFLAGS	Makefile	/^LDFLAGS			= -L${HOME}\/.brew\/opt\/readline\/lib$/;"	m
LIBFT	Makefile	/^LIBFT			= libft$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_LIB	Makefile	/^LIBFT_LIB		= libft.a$/;"	m
MINISHELL_H	minishell.h	/^# define MINISHELL_H$/;"	d
NAME	Makefile	/^NAME			= minishell$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS			= $(SRCS:.c=.o)$/;"	m
OBJS_MAN	libft/Makefile	/^OBJS_MAN = $(SRCS_MAN:.c=.o)$/;"	m
OPEN_MAX	get_next_line/get_next_line.h	/^#  define OPEN_MAX /;"	d
RLFLAGS	Makefile	/^RLFLAGS			= -lreadline$/;"	m
SHE	minishell.h	/^# define SHE /;"	d
SRCS	Makefile	/^SRCS			=	main.c							\\$/;"	m
SRCS_MAN	libft/Makefile	/^SRCS_MAN =	ft_atoi.c		\\$/;"	m
T_DQUOTE	minishell.h	/^# define T_DQUOTE /;"	d
T_ERROR	minishell.h	/^# define T_ERROR	/;"	d
T_PIPE	minishell.h	/^# define T_PIPE /;"	d
T_REDIRECT	minishell.h	/^# define T_REDIRECT /;"	d
T_SQUOTE	minishell.h	/^# define T_SQUOTE /;"	d
T_WORD	minishell.h	/^# define T_WORD /;"	d
add_order	pipes_youngski/pipe_line4.c	/^char	**add_order(char **t, char *str, int flag)$/;"	f
append_redirection	pipes_youngski/pipe_line3.c	/^int	append_redirection(int o_fd, t_token **head, t_data *data, int cmd_flag)$/;"	f
built_cd	builtin/built_in_cd.c	/^int	built_cd(char **t, char **envp)$/;"	f
built_echo	builtin/built_in_echo.c	/^int	built_echo(char **t)$/;"	f
built_env	builtin/built_in_env.c	/^int	built_env(char **builtin, t_list *head)$/;"	f
built_export	builtin/built_in_export1.c	/^int	built_export(char **builtin, t_list *head)$/;"	f
built_pwd	builtin/built_in1.c	/^int	built_pwd(void)$/;"	f
built_unset	builtin/built_in1.c	/^int	built_unset(char **builtin, t_list *head)$/;"	f
builtin	minishell.h	/^	char	**builtin;$/;"	m	struct:s_cover
builtin_check	builtin/built_in1.c	/^int	builtin_check(char *str)$/;"	f
call_exit	builtin/built_in_exit1.c	/^int	call_exit(char **builtin)$/;"	f
call_next	doc_parse/parsing_y3.c	/^char	**call_next(char *line_temp, char **ret, char *line, int i)$/;"	f
capacity	minishell.h	/^	int		capacity;$/;"	m	struct:s_str
change_stream	pipes_youngski/pipe_line2.c	/^void	change_stream(t_token **head, t_data *data, int *cmd_flag, \\$/;"	f
check_all_dollar	srcs/lex_env1.c	/^int	check_all_dollar(t_str **buf, char **str)$/;"	f
check_ambiguous_node	srcs/syntax_check1.c	/^int	check_ambiguous_node(t_token *temp)$/;"	f
check_builtin	builtin/built_in1.c	/^int	check_builtin(char **builtin, t_list *head, char **envp)$/;"	f
check_builtin_2	builtin/built_in1.c	/^int	check_builtin_2(char **builtin, t_list *head)$/;"	f
check_code_long	builtin/built_in_exit1.c	/^int	check_code_long(char *str)$/;"	f
check_command	pipes_youngski/check_cmd.c	/^int	check_command(char **path, char *cmd)$/;"	f
check_doc_next	srcs/doc_open2.c	/^int	check_doc_next(char **doc_str, int idx)$/;"	f
check_meta_chr	srcs/lex_env3.c	/^char	*check_meta_chr(t_str **env, int i, int len, int size)$/;"	f
check_rules	srcs/syntax_check1.c	/^int	check_rules(int *type_arr, int len)$/;"	f
check_syntax	srcs/syntax_check1.c	/^int	check_syntax(t_token *head)$/;"	f
clear_str	srcs/lex_free.c	/^void	clear_str(t_str *str)$/;"	f
cmds	minishell.h	/^	int				cmds;$/;"	m	struct:s_token
copy_orders	pipes_youngski/pipe_line4.c	/^char	**copy_orders(char **t, int i)$/;"	f
copy_token	srcs/lex_tokenize2.c	/^t_token	*copy_token(t_token *cur)$/;"	f
count	minishell.h	/^	int		count;$/;"	m	struct:s_doc
count_d_flag	srcs/doc_syntax2.c	/^int	count_d_flag(int *in_squote, int *in_dquote, int *d_flag)$/;"	f
count_heredoc	srcs/doc_open1.c	/^int	count_heredoc(char *line)$/;"	f
count_inside_char	doc_parse/parsing_y1.c	/^void	count_inside_char(int *i, int *count, char *line_temp, char my_char)$/;"	f
count_inside_char_double	doc_parse/parsing_y6.c	/^int	count_inside_char_double(char *line_temp)$/;"	f
count_inside_char_single	doc_parse/parsing_y6.c	/^int	count_inside_char_single(char *line_temp)$/;"	f
count_pure_word	doc_parse/parsing_y6.c	/^int	count_pure_word(char *line_temp, int count)$/;"	f
count_s_flag	srcs/doc_syntax2.c	/^int	count_s_flag(int *in_squote, int *in_dquote, int *s_flag)$/;"	f
count_size	libft/ft_split.c	/^static int	count_size(char const *s, char c)$/;"	f	file:
count_space	doc_parse/parsing_y1.c	/^int	count_space(char *line)$/;"	f
cp_stdin	minishell.h	/^	int		cp_stdin;$/;"	m	struct:s_cover
cp_stdout	minishell.h	/^	int		cp_stdout;$/;"	m	struct:s_cover
cut_line	get_next_line/get_next_line.c	/^char	*cut_line(char *backup)$/;"	f
cutting_t	builtin/built_in_echo.c	/^char	**cutting_t(char **t, int *flag)$/;"	f
cutting_t2	builtin/built_in_echo.c	/^int	cutting_t2(char **t, int *flag, int i, int *j)$/;"	f
data	minishell.h	/^	t_data	*data;$/;"	m	struct:s_cover
data	minishell.h	/^	t_data	*data;$/;"	m	struct:s_tuple
deep_copy_env	srcs/lex_tokenize.c	/^char	**deep_copy_env(char **envp)$/;"	f
del_one	builtin/built_in_export2.c	/^void	del_one(char *t, t_list *head_first)$/;"	f
do_builtin	main.c	/^int	do_builtin(t_cover *cover, t_list *head, char **envp)$/;"	f
doc	minishell.h	/^	t_doc	*doc;$/;"	m	struct:s_cover
doc_check	main.c	/^int	doc_check(t_cover *cover, char *line)$/;"	f
doc_child	srcs/doc_open3.c	/^int	doc_child(int idx, int count, t_doc **doc, int *pipe_fd)$/;"	f
doc_handler	srcs/sig_handle.c	/^void	doc_handler(int signo)$/;"	f
doc_name	minishell.h	/^	char	**doc_name;$/;"	m	struct:s_data
doc_parent	srcs/doc_open3.c	/^void	doc_parent(int idx, t_doc **doc, int *pipe_fd)$/;"	f
doc_syntax	srcs/doc_syntax1.c	/^int	doc_syntax(char *str)$/;"	f
doc_syntax_check	srcs/doc_syntax1.c	/^int	doc_syntax_check(char *str, const int len, int i)$/;"	f
dup_pipes	pipes_youngski/pipe_line3.c	/^void	dup_pipes(t_token **head, int *pipes, t_data *data)$/;"	f
env_error_check	builtin/built_in_export1.c	/^int	env_error_check(char *key)$/;"	f
env_read	srcs/lex_env1.c	/^int	env_read(t_str **buf, t_str **env, char *g_str)$/;"	f
envp	minishell.h	/^	char	**envp;$/;"	m	struct:s_data
exit_err_amb	srcs/err_exit.c	/^int exit_err_amb(char *cmd, int signal, int exit_code)$/;"	f
exit_error	srcs/err_exit.c	/^int	exit_error(char *message, int signal, int exit_code)$/;"	f
exit_error_cmd	srcs/err_exit.c	/^int	exit_error_cmd(char *message, int signal, int exit_code)$/;"	f
exit_num_arg_req	builtin/built_in_exit2.c	/^int	exit_num_arg_req(char *str)$/;"	f
export_parsing	builtin/built_in_export1.c	/^int	export_parsing(t_list **head, char **t)$/;"	f
find_cmd	pipes_youngski/check_cmd.c	/^int	find_cmd(char **path, char *path_cmd)$/;"	f
find_path	pipes_youngski/pipe_line2.c	/^char	*find_path(char *argv[], char **envp, int i)$/;"	f
first_last_arr	srcs/doc_syntax1.c	/^int	first_last_arr(char *str)$/;"	f
flip_meta_chr	srcs/lex_env3.c	/^char	*flip_meta_chr(char *ret)$/;"	f
forked_child_work	pipes_youngski/pipe_line2.c	/^void	forked_child_work(t_tuple tup, int *pipes,$/;"	f
free_meta_str	srcs/lex_env3.c	/^void	free_meta_str(char *meta_str, t_str **env, t_str *buf)$/;"	f
free_spl	srcs/lex_tokenize.c	/^void	free_spl(char **temp)$/;"	f
free_str	srcs/lex_free.c	/^void	free_str(t_str *str)$/;"	f
free_token	srcs/lex_free.c	/^void	free_token(t_token *cur)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	*ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_charjoin	libft/ft_strjoin.c	/^char	*ft_charjoin(char *s1, char s2)$/;"	f
ft_freeall	libft/ft_split.c	/^void	ft_freeall(char **spl)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_len	libft/ft_itoa.c	/^static size_t	ft_len(long long *num)$/;"	f	file:
ft_lstadd_back	builtin/envp_utils.c	/^void	ft_lstadd_back(t_list **lst, t_list *newlst)$/;"	f
ft_lstlast	builtin/envp_utils.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstnew	builtin/envp_utils.c	/^t_list	*ft_lstnew(void *key, void *value)$/;"	f
ft_max	srcs/utils.c	/^int	ft_max(int a, int b)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *dest, int c, size_t n)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(char *s1)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char *s1, char *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
g_exit_code	minishell.h	/^int	g_exit_code;$/;"	v
get_cmds_num	srcs/syntax_check2.c	/^int	get_cmds_num(int *type_arr, int token_len)$/;"	f
get_doc_count	srcs/doc_open2.c	/^int	get_doc_count(char **doc_str)$/;"	f
get_env_num	srcs/lex_env1.c	/^int	get_env_num(char *envp)$/;"	f
get_home	builtin/built_in_cd.c	/^char	*get_home(char **envp)$/;"	f
get_limiter	srcs/doc_open2.c	/^void	get_limiter(char **doc_str, t_doc *doc)$/;"	f
get_next_line	get_next_line/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_path	pipes_youngski/check_cmd.c	/^char	**get_path(char **envp)$/;"	f
get_rid_null_node	srcs/lex_tokenize2.c	/^void	get_rid_null_node(t_token **cur)$/;"	f
go_tokenize	srcs/lex_tokenize.c	/^t_token	*go_tokenize(char *cmd, char **envp, t_token **t)$/;"	f
handle_line	main.c	/^int	handle_line(char *line, t_cover *cover, char **envp, t_list *head)$/;"	f
head	minishell.h	/^	t_token	**head;$/;"	m	struct:s_tuple
head	minishell.h	/^	t_token	*head;$/;"	m	struct:s_cover
heredoc_file_make	srcs/doc_open1.c	/^void	heredoc_file_make(int fd, char *limiter)$/;"	f
heredoc_redirection	pipes_youngski/pipe_line3.c	/^int	heredoc_redirection(t_token **head, t_data *data,$/;"	f
i_flag	minishell.h	/^	int		i_flag;$/;"	m	struct:s_data
init_cover	srcs/init_1.c	/^t_cover	*init_cover(t_cover *cover)$/;"	f
init_data	srcs/init_1.c	/^int	init_data(t_data *data, t_doc doc, char **envp, t_token *head)$/;"	f
init_doc	srcs/init_2.c	/^t_doc	*init_doc(t_doc *doc)$/;"	f
init_env_list	builtin/envp_utils.c	/^t_list	*init_env_list(char **env, t_list **head)$/;"	f
init_export_parsing	builtin/built_in_export1.c	/^void	init_export_parsing(int *ret, char **t)$/;"	f
init_fail_and_num	srcs/lex_read2.c	/^void	init_fail_and_num(int *is_fail, int *num)$/;"	f
init_fd	srcs/init_1.c	/^void	init_fd(t_data *data)$/;"	f
init_fork	pipes_youngski/pipe_line1.c	/^int	init_fork(t_tuple tup, int i, int *heredoc_count, t_list *env_head)$/;"	f
init_inside_char	doc_parse/parsing_y1.c	/^void	init_inside_char(char my_char, char *t, int *flag, int *i)$/;"	f
init_line	srcs/init_1.c	/^char	*init_line(char *line)$/;"	f
init_make_env	builtin/built_in_export2.c	/^void	init_make_env(int *i, char **key, char **value, char *t)$/;"	f
init_prompt_sig	srcs/init_1.c	/^void	init_prompt_sig(int argc, __attribute__((unused)) char *argv[])$/;"	f
init_pure_word	doc_parse/parsing_y2.c	/^void	init_pure_word(int *sm_flag, int *du_flag)$/;"	f
init_split	doc_parse/parsing_y3.c	/^void	init_split(int *i, int *j, char *line, char **line_temp)$/;"	f
init_syntax_check	srcs/doc_syntax1.c	/^int	init_syntax_check(int *s_flag, int *d_flag, int *in_dquote, int *in_squote)$/;"	f
input_redirection	pipes_youngski/pipe_line3.c	/^int	input_redirection(int input_fd, t_token **head, t_data *data, int cmd_flag)$/;"	f
inside_char_plus	doc_parse/parsing_y1.c	/^void	inside_char_plus(int *i, int *count)$/;"	f
io_fd	minishell.h	/^	int		io_fd[2];$/;"	m	struct:s_data
is_all_space	srcs/doc_syntax1.c	/^int	is_all_space(char *str)$/;"	f
is_char_space	srcs/lex_make_push.c	/^int	is_char_space(char c)$/;"	f
is_exit_code_num	builtin/built_in_exit2.c	/^int	is_exit_code_num(char *str)$/;"	f
is_file_directory	pipes_youngski/check_cmd.c	/^int	is_file_directory(char *cmd)$/;"	f
is_g_exit_code	srcs/lex_read2.c	/^int	is_g_exit_code(char **s, t_str **buf, char *g_str, int i)$/;"	f
is_line_end	srcs/lex_tokenize.c	/^int	is_line_end(char s)$/;"	f
is_long_max	builtin/built_in_exit1.c	/^int	is_long_max(char *str, int *idx, const char *mx)$/;"	f
is_long_min	builtin/built_in_exit1.c	/^int	is_long_min(char *str, int *idx, const char *mn)$/;"	f
is_long_min_max	builtin/built_in_exit1.c	/^int	is_long_min_max(char *str, int is_minus)$/;"	f
is_meta_chr	srcs/lex_env2.c	/^int	is_meta_chr(char c)$/;"	f
is_path_gone	main.c	/^int	is_path_gone(char **path)$/;"	f
is_quote_doc	srcs/doc_syntax2.c	/^int	is_quote_doc(char *str, int i, int len)$/;"	f
is_sep	libft/ft_split.c	/^static int	is_sep(char s, char c)$/;"	f	file:
is_space	libft/ft_atoi.c	/^static int	is_space(char c)$/;"	f	file:
is_str_space	main.c	/^int	is_str_space(char *line)$/;"	f
is_word_end	srcs/lex_tokenize.c	/^int	is_word_end(char s)$/;"	f
keep_execve_chd	pipes_youngski/pipe_line5.c	/^char	**keep_execve_chd(t_data data, t_token **head, char **t, int *cmd_flag)$/;"	f
keep_execve_par	pipes_youngski/pipe_line5.c	/^char	**keep_execve_par(t_token **head, char **builtin, int *cmd_flag)$/;"	f
key	minishell.h	/^	char			*key;$/;"	m	struct:s_list
len	minishell.h	/^	int		len;$/;"	m	struct:s_str
limiters	minishell.h	/^	char	**limiters;$/;"	m	struct:s_doc
main	main.c	/^int	main(int argc, char **argv, char **envp)$/;"	f
make_doc_files	srcs/doc_open3.c	/^void	make_doc_files(int count, t_doc *doc)$/;"	f
make_env	builtin/built_in_export2.c	/^void	make_env(char *t, t_list **head, int i, int flag)$/;"	f
make_env_buf	srcs/lex_env1.c	/^int	make_env_buf(t_str **buf, t_str **env, char **envp, char *meta_str)$/;"	f
make_envp_arr	builtin/envp_utils.c	/^char	**make_envp_arr(t_list *head, int i)$/;"	f
make_inside_char_double	doc_parse/parsing_y1.c	/^int	make_inside_char_double(char *line_temp, char *ret, int *j)$/;"	f
make_inside_char_single	doc_parse/parsing_y1.c	/^int	make_inside_char_single(char *line_temp, char *ret, int *j)$/;"	f
make_line	get_next_line/get_next_line.c	/^char	*make_line(char *backup, int i)$/;"	f
make_meta_chr	srcs/lex_env3.c	/^char	*make_meta_chr(char *ret, int *size, char meta_chr)$/;"	f
make_pure_word	doc_parse/parsing_y2.c	/^int	make_pure_word(char *line_temp, char *ret)$/;"	f
make_retcur	srcs/lex_read2.c	/^t_token	*make_retcur(t_str *buf, t_token *cur, int is_fail, char ***envp)$/;"	f
make_str	srcs/lex_make_push.c	/^t_str	*make_str(void)$/;"	f
make_token	srcs/lex_make_push.c	/^t_token	*make_token(void)$/;"	f
make_type_arr	srcs/syntax_check1.c	/^int	*make_type_arr(t_token *head, int token_len)$/;"	f
meet_eof	get_next_line/get_next_line.c	/^char	*meet_eof(char **backup, char *buf, int read_size)$/;"	f
move_home	builtin/built_in_cd.c	/^int	move_home(char *home)$/;"	f
myfunc_split	doc_parse/parsing_y6.c	/^char	**myfunc_split(char *line, int i, int j)$/;"	f
name	minishell.h	/^	char	**name;$/;"	m	struct:s_doc
new_value	builtin/built_in_export2.c	/^void	new_value(t_list **head, char *key, char *value)$/;"	f
next	minishell.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	minishell.h	/^	struct s_token	*next;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
non_exit_many_arg	builtin/built_in_exit2.c	/^int	non_exit_many_arg(void)$/;"	f
null_flag	minishell.h	/^	int				null_flag;$/;"	m	struct:s_token
null_flag	minishell.h	/^	int		null_flag;$/;"	m	struct:s_str
o_flag	minishell.h	/^	int		o_flag;$/;"	m	struct:s_data
open_file	srcs/doc_open1.c	/^int	open_file(char *filename, int idx, t_doc **doc, int *pipe_fd)$/;"	f
open_heredoc	srcs/doc_open1.c	/^int	open_heredoc(t_doc *doc, char *line)$/;"	f
output_redirection	pipes_youngski/pipe_line3.c	/^int	output_redirection(int o_fd, t_token **head, t_data *data, int cmd_flag)$/;"	f
parent_proc	pipes_youngski/pipe_line1.c	/^void	parent_proc(int *pipes)$/;"	f
part_make_line	doc_parse/parsing_y4.c	/^void	part_make_line(int *i, int *j, int *count, char **line_temp)$/;"	f
path	minishell.h	/^	char	**path;$/;"	m	struct:s_data
pid	minishell.h	/^	int		*pid;$/;"	m	struct:s_data
pipe_line	pipes_youngski/pipe_line1.c	/^int	pipe_line(t_data data, t_token *head, t_cover cover, t_list *env_head)$/;"	f
pipe_split	doc_parse/parsing_y5.c	/^int	pipe_split(int *i, int *count, char *line_temp, char *ret)$/;"	f
place_word	libft/ft_split.c	/^static void	place_word(char **spl, char const *s, char c, int *flag)$/;"	f	file:
prev	minishell.h	/^	struct s_token	*prev;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
print_env	builtin/built_in_env.c	/^void	print_env(t_list *head)$/;"	f
print_export	builtin/built_in_export1.c	/^void	print_export(t_list *head)$/;"	f
print_token	srcs/lex_free.c	/^void	print_token(t_token *cur)$/;"	f
push_2str	srcs/lex_read2.c	/^void	push_2str(t_str **buf, char **s)$/;"	f
push_cmd	pipes_youngski/pipe_line2.c	/^char	**push_cmd(t_data *data, t_token **head, int *cmd_flag, int *hdoc_count)$/;"	f
push_str	srcs/lex_make_push.c	/^void	push_str(t_str *str, char val)$/;"	f
push_token	srcs/lex_make_push.c	/^t_token	*push_token(int type, t_str *buf, t_token *prev)$/;"	f
read_cmd	pipes_youngski/pipe_line2.c	/^char	**read_cmd(t_data *data, t_token **head, int *heredoc_count)$/;"	f
read_env	srcs/lex_read1.c	/^int	read_env(char **s, t_str *buf, char **temp)$/;"	f
read_pipe_redir	srcs/lex_read1.c	/^t_token	*read_pipe_redir(char **s, t_token *cur, t_str *buf)$/;"	f
read_word	srcs/lex_read1.c	/^t_token	*read_word(char **s, t_token *cur, t_str *buf, char **envp)$/;"	f
read_word_dquote	srcs/lex_read1.c	/^int	read_word_dquote(char **s, t_str *buf, char **envp)$/;"	f
read_word_quote	srcs/lex_read1.c	/^int	read_word_quote(char **s, t_str *buf, char **temp)$/;"	f
read_word_squote	srcs/lex_read1.c	/^int	read_word_squote(char **s, t_str *buf)$/;"	f
redirection_count	doc_parse/parsing_y4.c	/^int	redirection_count(int *i, int *count, char *line_temp)$/;"	f
redirection_split	doc_parse/parsing_y5.c	/^int	redirection_split(int *i, int *count, char *line_temp, char *ret)$/;"	f
resize_str	srcs/lex_free.c	/^void	resize_str(t_str *str)$/;"	f
rule_error	srcs/syntax_check2.c	/^int	rule_error(int *type_arr, int len)$/;"	f
rule_pipe	srcs/syntax_check1.c	/^int	rule_pipe(int *type_arr, int len)$/;"	f
rule_redirection	srcs/syntax_check1.c	/^int	rule_redirection(int *type_arr, int len)$/;"	f
s	minishell.h	/^	char	*s;$/;"	m	struct:s_str
s_cover	minishell.h	/^typedef struct s_cover$/;"	s
s_data	minishell.h	/^typedef struct s_data$/;"	s
s_doc	minishell.h	/^typedef struct s_doc$/;"	s
s_list	minishell.h	/^typedef struct s_list$/;"	s
s_str	minishell.h	/^typedef struct s_str$/;"	s
s_token	minishell.h	/^typedef struct s_token$/;"	s
s_tuple	minishell.h	/^typedef struct s_tuple$/;"	s
see_next_word	srcs/lex_read1.c	/^int	see_next_word(char **s, t_str *env, char *g_str, t_str *buf)$/;"	f
see_next_word_meta	srcs/lex_env3.c	/^int	see_next_word_meta(char **s, t_str **buf, char *g_str)$/;"	f
see_next_word_null	srcs/lex_read2.c	/^int	see_next_word_null(char **s, t_str **buf)$/;"	f
set_signal	srcs/sig_handle.c	/^void	set_signal(int sig_int, int sig_quit)$/;"	f
setting_make_env	builtin/built_in_export2.c	/^void	setting_make_env(int *i, int *flag)$/;"	f
signal_handler	srcs/sig_handle.c	/^void	signal_handler(int signo)$/;"	f
skip_space	doc_parse/parsing_y3.c	/^int	skip_space(int *i, char **line_temp)$/;"	f
str	minishell.h	/^	char			*str;$/;"	m	struct:s_token
str_free	get_next_line/get_next_line.c	/^void	str_free(char **str)$/;"	f
syntax_err	srcs/syntax_check2.c	/^int	syntax_err(void)$/;"	f
t_cover	minishell.h	/^}	t_cover;$/;"	t	typeref:struct:s_cover
t_data	minishell.h	/^}	t_data;$/;"	t	typeref:struct:s_data
t_doc	minishell.h	/^}	t_doc;$/;"	t	typeref:struct:s_doc
t_list	minishell.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_str	minishell.h	/^}	t_str;$/;"	t	typeref:struct:s_str
t_token	minishell.h	/^}	t_token;$/;"	t	typeref:struct:s_token
t_tuple	minishell.h	/^}	t_tuple;$/;"	t	typeref:struct:s_tuple
temp	minishell.h	/^	t_token	*temp;$/;"	m	struct:s_cover
temp_count_plus_word	doc_parse/parsing_y6.c	/^void	temp_count_plus_word(char **line_temp, int *count)$/;"	f
tokenize	srcs/lex_tokenize.c	/^t_token	*tokenize(char *s, char **envp)$/;"	f
type	minishell.h	/^	int				type;$/;"	m	struct:s_token
value	minishell.h	/^	char			*value;$/;"	m	struct:s_list
wait_all	pipes_youngski/pipe_line5.c	/^int	wait_all(pid_t last_pid)$/;"	f
with_signal_exit	pipes_youngski/pipe_line5.c	/^int	with_signal_exit(int *signo, int *status, int *i)$/;"	f
zero	minishell.h	/^	int		zero;$/;"	m	struct:s_doc
